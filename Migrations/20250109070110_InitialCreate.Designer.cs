// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250109070110_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Attribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("StringId")
                        .HasColumnType("integer");

                    b.Property<int?>("WeakId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StringId");

                    b.HasIndex("WeakId");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("Digimon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AttributeId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("TierId")
                        .HasColumnType("integer");

                    b.Property<int?>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("TierId");

                    b.HasIndex("TypeId");

                    b.ToTable("Digimons");
                });

            modelBuilder.Entity("DigimonSpecialMove", b =>
                {
                    b.Property<int>("DigimonsId")
                        .HasColumnType("integer");

                    b.Property<int>("SpecialMovesId")
                        .HasColumnType("integer");

                    b.HasKey("DigimonsId", "SpecialMovesId");

                    b.HasIndex("SpecialMovesId");

                    b.ToTable("DigimonSpecialMove");
                });

            modelBuilder.Entity("SpecialMove", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("SpecialMoves");
                });

            modelBuilder.Entity("Tier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Tiers");
                });

            modelBuilder.Entity("Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("Attribute", b =>
                {
                    b.HasOne("Attribute", "StrongAgainst")
                        .WithMany()
                        .HasForeignKey("StringId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Attribute", "WeakAgainst")
                        .WithMany()
                        .HasForeignKey("WeakId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("StrongAgainst");

                    b.Navigation("WeakAgainst");
                });

            modelBuilder.Entity("Digimon", b =>
                {
                    b.HasOne("Attribute", "Attribute")
                        .WithMany("Digimons")
                        .HasForeignKey("AttributeId");

                    b.HasOne("Tier", "Tier")
                        .WithMany("Digimons")
                        .HasForeignKey("TierId");

                    b.HasOne("Type", "Type")
                        .WithMany("Digimons")
                        .HasForeignKey("TypeId");

                    b.Navigation("Attribute");

                    b.Navigation("Tier");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("DigimonSpecialMove", b =>
                {
                    b.HasOne("Digimon", null)
                        .WithMany()
                        .HasForeignKey("DigimonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpecialMove", null)
                        .WithMany()
                        .HasForeignKey("SpecialMovesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Attribute", b =>
                {
                    b.Navigation("Digimons");
                });

            modelBuilder.Entity("Tier", b =>
                {
                    b.Navigation("Digimons");
                });

            modelBuilder.Entity("Type", b =>
                {
                    b.Navigation("Digimons");
                });
#pragma warning restore 612, 618
        }
    }
}
