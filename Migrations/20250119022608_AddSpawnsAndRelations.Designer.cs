// <auto-generated />
using DigimonAPI.entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250119022608_AddSpawnsAndRelations")]
    partial class AddSpawnsAndRelations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ArtifactSpawn", b =>
                {
                    b.Property<int>("ArtifactId")
                        .HasColumnType("integer");

                    b.Property<int>("SpawnArtifactId")
                        .HasColumnType("integer");

                    b.HasKey("ArtifactId", "SpawnArtifactId");

                    b.HasIndex("SpawnArtifactId");

                    b.ToTable("ArtifactSpawn");
                });

            modelBuilder.Entity("DigimonAPI.entities.Artifact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.ToTable("Artifacts");
                });

            modelBuilder.Entity("DigimonAPI.entities.Attribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("StrongId")
                        .HasColumnType("integer");

                    b.Property<int?>("WeakId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StrongId");

                    b.HasIndex("WeakId");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("DigimonAPI.entities.Digimon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AttributeId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("TierId")
                        .HasColumnType("integer");

                    b.Property<int?>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ImgUrl")
                        .IsUnique();

                    b.HasIndex("TierId");

                    b.HasIndex("TypeId");

                    b.ToTable("Digimons");
                });

            modelBuilder.Entity("DigimonAPI.entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("DigimonAPI.entities.SpawnArtifact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Chance")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("SpawnArtifacts");
                });

            modelBuilder.Entity("DigimonAPI.entities.SpawnDigimon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Chance")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("SpawnDigimons");
                });

            modelBuilder.Entity("DigimonAPI.entities.SpawnEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Chance")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("SpawnEvents");
                });

            modelBuilder.Entity("DigimonAPI.entities.SpawnUsable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Chance")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("SpawnUsables");
                });

            modelBuilder.Entity("DigimonAPI.entities.SpecialMove", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("SpecialMoves");
                });

            modelBuilder.Entity("DigimonAPI.entities.Tier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Tiers");
                });

            modelBuilder.Entity("DigimonAPI.entities.Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("DigimonAPI.entities.Usable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.ToTable("Usables");
                });

            modelBuilder.Entity("DigimonSpawn", b =>
                {
                    b.Property<int>("DigimonId")
                        .HasColumnType("integer");

                    b.Property<int>("SpawnDigimonId")
                        .HasColumnType("integer");

                    b.HasKey("DigimonId", "SpawnDigimonId");

                    b.HasIndex("SpawnDigimonId");

                    b.ToTable("DigimonSpawn");
                });

            modelBuilder.Entity("DigimonSpecialMove", b =>
                {
                    b.Property<int>("DigimonId")
                        .HasColumnType("integer");

                    b.Property<int>("SpecialMoveId")
                        .HasColumnType("integer");

                    b.HasKey("DigimonId", "SpecialMoveId");

                    b.HasIndex("SpecialMoveId");

                    b.ToTable("DigimonSpecialMove");
                });

            modelBuilder.Entity("EventSpawn", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<int>("SpawnEventId")
                        .HasColumnType("integer");

                    b.HasKey("EventId", "SpawnEventId");

                    b.HasIndex("SpawnEventId");

                    b.ToTable("EventSpawn");
                });

            modelBuilder.Entity("UsableSpawn", b =>
                {
                    b.Property<int>("SpawnUsableId")
                        .HasColumnType("integer");

                    b.Property<int>("UsableId")
                        .HasColumnType("integer");

                    b.HasKey("SpawnUsableId", "UsableId");

                    b.HasIndex("UsableId");

                    b.ToTable("UsableSpawn");
                });

            modelBuilder.Entity("ArtifactSpawn", b =>
                {
                    b.HasOne("DigimonAPI.entities.Artifact", null)
                        .WithMany()
                        .HasForeignKey("ArtifactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigimonAPI.entities.SpawnArtifact", null)
                        .WithMany()
                        .HasForeignKey("SpawnArtifactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DigimonAPI.entities.Attribute", b =>
                {
                    b.HasOne("DigimonAPI.entities.Attribute", "StrongAgainst")
                        .WithMany()
                        .HasForeignKey("StrongId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DigimonAPI.entities.Attribute", "WeakAgainst")
                        .WithMany()
                        .HasForeignKey("WeakId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("StrongAgainst");

                    b.Navigation("WeakAgainst");
                });

            modelBuilder.Entity("DigimonAPI.entities.Digimon", b =>
                {
                    b.HasOne("DigimonAPI.entities.Attribute", "Attribute")
                        .WithMany("Digimons")
                        .HasForeignKey("AttributeId");

                    b.HasOne("DigimonAPI.entities.Tier", "Tier")
                        .WithMany("Digimons")
                        .HasForeignKey("TierId");

                    b.HasOne("DigimonAPI.entities.Type", "Type")
                        .WithMany("Digimons")
                        .HasForeignKey("TypeId");

                    b.Navigation("Attribute");

                    b.Navigation("Tier");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("DigimonSpawn", b =>
                {
                    b.HasOne("DigimonAPI.entities.Digimon", null)
                        .WithMany()
                        .HasForeignKey("DigimonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigimonAPI.entities.SpawnDigimon", null)
                        .WithMany()
                        .HasForeignKey("SpawnDigimonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DigimonSpecialMove", b =>
                {
                    b.HasOne("DigimonAPI.entities.Digimon", null)
                        .WithMany()
                        .HasForeignKey("DigimonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigimonAPI.entities.SpecialMove", null)
                        .WithMany()
                        .HasForeignKey("SpecialMoveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventSpawn", b =>
                {
                    b.HasOne("DigimonAPI.entities.Event", null)
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigimonAPI.entities.SpawnEvent", null)
                        .WithMany()
                        .HasForeignKey("SpawnEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UsableSpawn", b =>
                {
                    b.HasOne("DigimonAPI.entities.SpawnUsable", null)
                        .WithMany()
                        .HasForeignKey("SpawnUsableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigimonAPI.entities.Usable", null)
                        .WithMany()
                        .HasForeignKey("UsableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DigimonAPI.entities.Attribute", b =>
                {
                    b.Navigation("Digimons");
                });

            modelBuilder.Entity("DigimonAPI.entities.Tier", b =>
                {
                    b.Navigation("Digimons");
                });

            modelBuilder.Entity("DigimonAPI.entities.Type", b =>
                {
                    b.Navigation("Digimons");
                });
#pragma warning restore 612, 618
        }
    }
}
